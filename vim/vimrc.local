"" general setup
" Don't behave like vi when vim can do better.
set nocompatible

"" vundle
filetype off
call vundle#rc()
filetype plugin indent on
"/>

" Reload file when changed on the filesystem.
set autoread

" Set shell to bash and source the coreponding configs.
set shell=bash
set shellcmdflag=-ic
"/>

"" Bundles
Bundle 'leafgarland/typescript-vim'
let g:typescript_compiler_options = '--sourceMap --removeComments'
autocmd QuickFixCmdPost [^l]* nested cwindow
autocmd QuickFixCmdPost    l* nested lwindow
"/>

"" 
set clipboard=unnamedplus
"/>

"" key-bindings
    " Turn on mouse in X (use ssh -X for remote)
    set mouse=a

    " Key for extra combinations.
    let mapleader = ","
    let g:mapleader = ","
    let g:users_emmet_leader_key = '<C-,>'

    " Run any runnable file.
    map <F5> :w<CR>:!/usr/local/lib/torben/library/runable/codeFile.py -f  $(echo -en $PWD/; basename %)<CR>

    " Fast saving
    nmap <leader>w :w!<cr>

    " Toggle folds with space.
    nmap <space> za

    "Pressing ,s will toggle and untoggle spell checking
    map <leader>s :setlocal spell!<cr>
    map <leader>sd :setlocal spelllang=de_de<cr>
    map <leader>se :setlocal spelllang=en_us<cr>
    "Pressing ctr-f corrects spelling in both insert and normal mode.
    imap <c-f> <c-g>u<Esc>[H>[s1z=`]a<c-g>u
    nmap <c-f> [s1z=<c-o>
"/>

"" Tabs
    set tabstop=4
    set shiftwidth=4
    set expandtab
    retab

    " no placeholders please
    let g:Imap_UsePlaceHolders = 0

    " no " conversion please
    let g:Tex_SmartKeyQuote = 0
"/>

"" Textwidth, Wrapping, Indention
    set textwidth=79
    set autoindent
    set nowrap
"/>

"" Theme and Layout
    " Set Colors
    if &term == 'xterm'
        set t_Co=256
    endif
    highlight clear
    syntax reset
    " colorscheme darkblue
    " colorscheme jellybeans
    " colorscheme 256-grayvim
    " colorscheme lightcolors
    " colorscheme eclipse
    let &colorcolumn=80  " join(range(80, 81), ',')
    highlight ColorColumn ctermbg=grey

    "" Displayed Information
        " Set syntax on.
        syntax on
        " Highlight search-term.
        set hlsearch

        " Show hidden character
        set list
        set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<

        " Show matching braces.
        set showmatch

        " Set encoding to utf-8
        set encoding=utf-8

        " Always show the name of the file being edited.
        set ls=2

        " Show the mode (insert,replace,etc.)
        set showmode

        " No blinking cursor please.
        set gcr=a:blinkon0

        "" spell
            set spelllang=de_de,en_us
            highlight clear SpellBad
            highlight SpellBad cterm=underline,bold ctermfg=red
        "/>
    "/>
"/>

"" C code
    " Toggle between .h and .cpp with F4.
    function! ToggleBetweenHeaderAndSourceFile()
      let bufname = bufname("%")
      let ext = fnamemodify(bufname, ":e")
      if ext == "h"
        let ext = "cpp"
      elseif ext == "cpp"
        let ext = "h"
      else
        return
      endif
      let bufname_new = fnamemodify(bufname, ":r") . "." . ext
      let bufname_alt = bufname("#")
      if bufname_new == bufname_alt
        execute ":e#"
      else
        execute ":e " . bufname_new
      endif
    endfunction
    map <silent> <F4> :call ToggleBetweenHeaderAndSourceFile()<CR>
"/>

"" Makefiles
    " But TABs are needed in Makefiles
    au BufNewFile,BufReadPost Makefile se noexpandtab

    " don't use Makefile if one is there
    let g:Tex_UseMakefile = 0
"/>

"" Latex
    filetype plugin indent on
    set grepprg=grep\ -nH\ $*
    let g:tex_flavor = "latex"
    " IMPORTANT: win32 users will need to have 'shellslash' set so that latex
    " can be called correctly.
    set shellslash
"/>

"" F5-runner
    " C++
    autocmd FileType c++ map <F5> :w<CR>:!runc %<CR>

    " Python
    autocmd FileType python map <F5> :w<CR>:!./%<CR>

    " Latex + biber
    autocmd FileType latex map <F5> :w<CR>:!pdflatex *Main.tex; biber *Main.bib; pdflatex *Main.tex<CR>
"/>

"" guioptions
    set guioptions=agimrt
    " The following 2 lines are neccesery due to a bug
    set guioptions+=LlRrb
    set guioptions-=LlRrb
    set guifont="Ubuntu Mono 11"
"/>

"" Syntastics
    let g:syntastic_check_on_open=1
"/>

"" Regions
    set foldmethod=marker "indent,marker,syntax
    set foldmarker=region,endregion
    let g:pymode_folding = 0
"/>

"" Autocomplete
    let g:neocomplete#disable_auto_complete = 1

    " Test if the previous char is a space
    function! s:check_back_space()
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~ '\s'
    endfunction

    " Use tab to open or navigate in autocomplete.
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" :
            \ <SID>check_back_space() ? "\<TAB>" :
            \ neocomplete#start_manual_complete()

    " Use shift-tab to navigate backwards
    inoremap <expr><s-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"
"/>

"" Example for custom syntax-highlighting
sy clear
sy match mine_hexa /\v0x[0-9A-Fa-f]+/
hi mine_hexa ctermfg=DarkMagenta
"/>

"file-settings for vim: foldmethod=marker foldmarker="","/>
